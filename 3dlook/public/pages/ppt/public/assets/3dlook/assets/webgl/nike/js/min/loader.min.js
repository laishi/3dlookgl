function Loader() {
    this.loadingCounter = 0,
    this.currentlyLoading = 0,
    this.finished = !1,
    this.texturePath = "textures_low/",
    this.loadingCircle1Geom = null,
    this.loadingCircleFG = null,
    this.mapLoadingFG = THREE.ImageUtils.loadTexture("images/loading_circle_fg.jpg", new THREE.UVMapping),
    this.mapLoadingBG = THREE.ImageUtils.loadTexture("images/loading_circle_bg.jpg", new THREE.UVMapping),
    this.materialsShaders = null,
    this.materials = null,
    this.lastLoadedShoeGroup = -1,
    this.initLoadingScene = function() {
        null == nike.scene && (nike.scene = new THREE.Scene),
        this.loadingCircle2Geom = new THREE.CircleGeometry(240, 36, 0, 4 * Math.PI),
        nike.loadingCircleBG = new THREE.Mesh(this.loadingCircle2Geom, new THREE.MeshBasicMaterial({
            color: 16777215,
            side: THREE.DoubleSide,
            map: this.mapLoadingBG,
            transparent: !1
        })),
        nike.loadingCircleBG.rotation = new THREE.Euler( - 90 * DEG2RAD, 0, 90 * DEG2RAD, "XYZ"),
        nike.loadingCircleBG.position.z = 0,
        nike.loadingCircleBG.position.y = 99.9,
        nike.scene.add(nike.loadingCircleBG),
        this.materialsShaders = [],
        this.materials = []
    },
    this.update = function() {
        var e = this.loadingCounter / assets.length;
        null !== nike.loadingCircleFG && (nike.scene.remove(nike.loadingCircleFG), nike.loadingCircleFG.geometry.dispose()),
        this.finished && (e += .05),
        this.loadingCircle1Geom = new THREE.CircleGeometry(240, 36, .5 * Math.PI, -(e - .05) * Math.PI * 2),
        nike.loadingCircleFG = new THREE.Mesh(this.loadingCircle1Geom, new THREE.MeshBasicMaterial({
            color: 16777215,
            side: THREE.DoubleSide,
            map: this.mapLoadingFG,
            transparent: !0,
            opacity: 1
        })),
        nike.loadingCircleFG.scale = new THREE.Vector3(1, 1, 1),
        nike.loadingCircleFG.rotation = new THREE.Euler( - 90 * DEG2RAD, 0, 90 * DEG2RAD, "XYZ"),
        nike.loadingCircleFG.position.y = 100,
        this.loadingCircle1Geom.dynamic = !1,
        nike.scene.add(nike.loadingCircleFG)
    },
    this.getAsset = function(e) {
        for (var a = 0; a < assets.length; a++) if (assets[a].id == e) return assets[a].asset;
        console.log("getAsset(" + e + ") not found!")
    },
    this.loadAsset = function() {
        var e = assets[this.loadingCounter];
        if (void 0 !== e) if ("texture" == e.type) loader.currentlyLoading++,
        e.asset = THREE.ImageUtils.loadTexture(loader.texturePath + e.filename, new THREE.UVMapping,
        function() {
            loader.currentlyLoading--,
            loader.loadNext()
        });
        else if ("scene" == e.type) {
            var a = new THREE.SceneLoader;
            loader.currentlyLoading++,
            a.load("objekte/scenetest.js",
            function(e) {
                nike.scene = e.scene,
                loader.initLoadingScene(),
                nike.objBG = nike.scene.getObjectByName("Background", !0),
                nike.objBG.material = new THREE.MeshBasicMaterial({
                    color: 16777215,
                    transparent: !1
                }),
                nike.objBG.material.map = loader.getAsset("bg"),
                nike.objBG.material.needsUpdate = !0,
                loader.currentlyLoading--,
                loader.loadNext()
            })
        } else "model" == e.type || "model_utf8" == e.type || "detail_model_utf8" == e.type ? (loader.lastLoadedShoeGroup != e.shoeGroup && (loader.lastLoadedShoeGroup = e.shoeGroup, nike.scene.add(nike.shoeGroups[e.shoeGroup])), this.getModelJS(e.index + "", nike.shoeGroups[e.shoeGroup], e)) : "emptymodel" == e.type && nike.shoeGroups[e.shoeGroup].add(new THREE.Mesh(new THREE.Geometry, new THREE.MeshBasicMaterial))
    },
    this.loadNext = function() {
        this.currentlyLoading >= 5 || (this.loadingCounter < assets.length ? (this.loadingCounter++, this.loadAsset()) : this.currentlyLoading > 0 ? setTimeout(function() {
            loader.loadNext()
        },
        150) : this.finished || (this.finished = !0, this.update(), $("#loading").hide(), sequencer.initSequencer(), $("#loading_logo").hide(), $("#loadinghider").fadeIn(), $("#startnike").show(), myResize()))
    },
    this.startLoading = function() {
        this.loadAsset()
    },
    this.getModelJS = function(e, a, t) {
        if (loader.currentlyLoading++, "model_utf8" == t.type) {
            var i = new THREE.UTF8Loader;
            i.load(t.filename,
            function(e) {
                for (var i = nike.getMaterial(t), n = e.children[0].children.length, l = 0, r = 0; n > r; r++) e.children[0].children[0].geometry.computeTangents(),
                t.diffusemap = t.matData[r].diffusemap,
                t.normalmap = t.matData[r].normalmap,
                t.specmap = t.matData[r].specmap,
                t.alphamap = t.matData[r].alphamap,
                t.transparent = t.matData[r].transparent,
                t.depthWrite = t.matData[r].depthWrite,
                i = nike.getMaterial(t),
                e.children[0].children[0].material = i,
                e.children[0].children[0].material.useBlackWhite = !0,
                e.children[0].children[0].name = "" + r,
                e.children[0].children[0].scale = new THREE.Vector3(1, 1, 1),
                a.add(e.children[0].children[0]),
                l++;
                for (; e.children[0].length > 0;) e = void 0;
                loader.currentlyLoading--,
                loader.loadNext()
            })
        } else {
            var n = new THREE.BinaryLoader;
            n.load(t.filename,
            function(i) {
                var l = {
                    color: 16777215,
                    specular: 16777215,
                    ambient: 8947848,
                    shininess: 0,
                    useBlackWhite: 1,
                    blackwhite: 0,
                    blending: THREE.NormalBlending,
                    map: loader.getAsset(t.diffusemap),
                    normalMap: loader.getAsset(t.normalmap)
                };
                1 == t.transparent && (l.side = THREE.DoubleSide),
                1 == t.transparent && (l.transparent = !0),
                1 == t.depthwrite && (l.depthwrite = !0),
                0 == t.depthwrite && (l.depthwrite = !1),
                t.envmap && (l.envMap = loader.getAsset(t.envmap)),
                1 == t.doublesided && (l.side = THREE.DoubleSide);
                for (var r = null,
                o = 0; o < loader.materials.length; o++) if (l.map == loader.materialsShaders[o].map && l.normalMap == loader.materialsShaders[o].normalMap) {
                    r = loader.materials[o],
                    r.blackwhite = 1;
                    break
                }
                if (null === r && (r = new THREE.MeshPhongMaterial(l), loader.materialsShaders.push(l), loader.materials.push(r)), i.computeTangents(), r.envMap) {
                    var s = r;
                    r = new THREE.ShaderMaterial({
                        uniforms: {
                            tNormal: {
                                type: "t",
                                value: s.normalMap
                            },
                            tMatCap: {
                                type: "t",
                                value: s.envMap
                            },
                            tDiffuse: {
                                type: "t",
                                value: s.map
                            },
                            tMatCapRim: {
                                type: "t",
                                value: loader.getAsset("envmap_rimlight")
                            },
                            time: {
                                type: "f",
                                value: 0
                            },
                            bump: {
                                type: "f",
                                value: 1
                            },
                            noise: {
                                type: "f",
                                value: .04
                            },
                            repeat: {
                                type: "v2",
                                value: new THREE.Vector2(1, 1)
                            },
                            useNormal: {
                                type: "f",
                                value: 1
                            },
                            useRim: {
                                type: "f",
                                value: 0
                            },
                            rimPower: {
                                type: "f",
                                value: 2
                            },
                            useScreen: {
                                type: "f",
                                value: 0
                            },
                            normalScale: {
                                type: "f",
                                value: .5
                            },
                            normalRepeat: {
                                type: "f",
                                value: 1
                            },
                            blackwhite: {
                                type: "f",
                                value: .5
                            }
                        },
                        vertexShader: document.getElementById("vertexShader").textContent,
                        fragmentShader: document.getElementById("fragmentShader").textContent,
                        wrapping: THREE.ClampToEdgeWrapping,
                        shading: THREE.SmoothShading,
                        side: THREE.DoubleSide
                    }),
                    1 == t.transparent && (r.side = THREE.DoubleSide),
                    1 == t.transparent && (r.transparent = !0),
                    1 == t.depthwrite && (r.depthwrite = !0),
                    0 == t.depthwrite && (r.depthwrite = !1),
                    1 == t.doublesided && (r.side = THREE.DoubleSide),
                    r.uniforms.tMatCap.value.wrapS = r.uniforms.tMatCap.value.wrapT = THREE.ClampToEdgeWrapping,
                    r.uniforms.tNormal.value.wrapS = r.uniforms.tNormal.value.wrapT = THREE.RepeatWrapping
                }
                var d = new THREE.Mesh(i, r);
                d.material.useBlackWhite = !0,
                d.name = "" + e,
                d.scale = new THREE.Vector3(conf.shoeScale, conf.shoeScale, conf.shoeScale),
                i.dynamic = !1,
                a.add(d),
                loader.currentlyLoading--,
                l = void 0,
                n = void 0,
                t = void 0,
                loader.loadNext()
            })
        }
    }
}